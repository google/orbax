# The name for the entire test suite run.
suite_name: "PyTreeCheckpointer Performance Matrix"

mesh_config:
  mesh_axes: ["data", "stage", "fsdp", "fsdp_transpose", "sequence", "tensor", "expert", "autoregressive"]
  ici_parallelism: {"tensor": 2, "data": 4}
  # DCN: 1 process for Pathways.
  dcn_parallelism: {"data": 1}
  process_is_granule: True

# The checkpoint configuration, shared across all generated benchmarks.
checkpoint_config:
  random_seed: 6
  spec:
    a: {dtype: "float32", shape: [268435456], sharding: ["data"]}
    b: {dtype: "float32", shape: [16384, 16384], sharding: ["tensor", "data"]}
    c: {dtype: "float32", shape: [8192, 32768], sharding: ["tensor", "data"]}
    d: {dtype: "float32", shape: [4096, 65536], sharding: ["tensor", "data"]}
    e: {dtype: "float32", shape: [2048, 131072], sharding: ["tensor", "data"]}
    f: {dtype: "float32", shape: [1024, 262144], sharding: ["tensor", "data"]}
    g: {dtype: "float32", shape: [512, 524288], sharding: ["tensor", "data"]}
    h: {dtype: "float32", shape: [256, 1048576], sharding: ["tensor", "data"]}
    i: {dtype: "float32", shape: [128, 2097152], sharding: ["tensor", "data"]}
    j: {dtype: "float32", shape: [64, 4194304], sharding: ["tensor", "data"]}
    k: {dtype: "float32", shape: [32, 8388608], sharding: ["tensor", "data"]}
    l: {dtype: "float32", shape: [16, 16777216], sharding: ["tensor", "data"]}
    m: {dtype: "float32", shape: [8, 33554432], sharding: ["tensor", "data"]}
    n: {dtype: "float32", shape: [4, 67108864], sharding: ["tensor", "data"]}
    o: {dtype: "float32", shape: [4, 4, 16777216], sharding: [null, "tensor", "data"]}
    p: {dtype: "float32", shape: [4, 8, 8388608], sharding: [null, "tensor", "data"]}
    q: {dtype: "float32", shape: [4, 16, 4194304], sharding: [null, "tensor", "data"]}
    r: {dtype: "float32", shape: [4, 32, 2097152], sharding: [null, "tensor", "data"]}
    s: {dtype: "float32", shape: [4, 64, 1048576], sharding: [null, "tensor", "data"]}
    t: {dtype: "float32", shape: [4, 128, 524288], sharding: [null, "tensor", "data"]}
    u: {dtype: "float32", shape: [4, 256, 262144], sharding: [null, "tensor", "data"]}
    v: {dtype: "float32", shape: [4, 512, 131072], sharding: [null, "tensor", "data"]}
    w: {dtype: "float32", shape: [4, 1024, 65536], sharding: [null, "tensor", "data"]}
    x: {dtype: "float32", shape: [4, 2048, 32768], sharding: [null, "tensor", "data"]}
    y: {dtype: "float32", shape: [4, 4096, 16384], sharding: [null, "tensor", "data"]}
    z: {dtype: "float32", shape: [4, 8192, 8192], sharding: [null, "tensor", "data"]}

benchmarks:
  - generator: "orbax.checkpoint._src.testing.benchmarks.pytree_checkpoint_benchmark.PyTreeCheckpointBenchmark"
    options:
      # --- Generator Options ---
      # These keys must match the attributes of the `PyTreeCheckpointOptions` class
      # associated with the `PyTreeCheckpointBenchmark` generator.
      # The options are:
      #   - use_ocdbt
      #   - use_zarr3
      use_ocdbt: [True]
      use_zarr3: [False]
      async_checkpointer: [False]
      tracemalloc_enabled: [True]
