# Copyright 2025 The Orbax Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Benchmarks for orbax.checkpoint.PyTreeCheckpointHandler."""
from collections.abc import Sequence
import dataclasses
from typing import Any
from absl import logging
import jax
from orbax.checkpoint import checkpoint_utils
from orbax.checkpoint._src.checkpointers import async_checkpointer
from orbax.checkpoint._src.handlers import pytree_checkpoint_handler
from orbax.checkpoint._src.multihost import multihost
from orbax.checkpoint._src.testing.benchmarks.core import core as benchmarks_core


# ==============================================================================
# 1. Define the Options Dataclass for this specific benchmark
# ==============================================================================
@dataclasses.dataclass(frozen=True)
class PyTreeCheckpointOptions(benchmarks_core.BenchmarkOptions):
  """Configuration options for benchmarks targeting PyTreeCheckpointHandler.

  Each attribute can be a single value or a list of values to create
  a parameter sweep.

  Attributes:
    use_ocdbt: Whether to use OCPDBT for checkpointing.
    use_zarr3: Whether to use Zarr3 for checkpointing.
  """

  use_ocdbt: bool | Sequence[bool] = True
  use_zarr3: bool | Sequence[bool] = False


# ==============================================================================
# 2. Implement the Benchmark Generator
# ==============================================================================
@benchmarks_core.benchmark_options(PyTreeCheckpointOptions)
class PyTreeCheckpointBenchmark(benchmarks_core.BenchmarksGenerator):
  """A concrete generator for `orbax.checkpoint.PyTreeCheckpointHandler`.

  This class provides the specific test logic for benchmarking the
  PyTreeCheckpointHandler with various configurations.
  """

  def _clear_pytree(self, pytree: Any) -> Any:
    """Clears the pytree to free up memory."""
    return jax.tree.map(
        lambda x: x.delete() if isinstance(x, jax.Array) else None, pytree
    )

  def test_fn(
      self, context: benchmarks_core.TestContext
  ) -> benchmarks_core.TestResult:
    """The core test logic for a single save/restore cycle.

    This function is called for each combination of options generated by the
    framework. It uses the `context.options` to configure the handler
    dynamically for each run.

    Args:
      context: The test context containing the pytree, path, and options.

    Returns:
      The test result containing the metrics.
    """
    metrics = benchmarks_core.Metrics()
    pytree = context.pytree
    save_path = context.path / "pytree"
    options = context.options
    assert isinstance(options, PyTreeCheckpointOptions)


    handler = pytree_checkpoint_handler.PyTreeCheckpointHandler(
        use_ocdbt=options.use_ocdbt,
        use_zarr3=options.use_zarr3,
    )
    checkpointer = async_checkpointer.AsyncCheckpointer(handler)

    with metrics.time("save"):
      checkpointer.save(
          save_path, args=pytree_checkpoint_handler.PyTreeSaveArgs(pytree)
      )

    with metrics.time("wait_until_finished"):
      checkpointer.wait_until_finished()

    context.pytree = self._clear_pytree(context.pytree)

    with metrics.time("restore"):
      checkpointer.restore(
          save_path,
          args=pytree_checkpoint_handler.PyTreeRestoreArgs(
              item=pytree,
              restore_args=checkpoint_utils.construct_restore_args(pytree),
          ),
      )

    checkpointer.close()
    return benchmarks_core.TestResult(metrics=metrics)
