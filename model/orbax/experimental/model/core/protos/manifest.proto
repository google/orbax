syntax = "proto3";

package orbax_model_manifest;

import "orbax/experimental/model/core/protos/type.proto";

message Manifest {
  map<string, TopLevelObject> objects = 1;
  map<string, UnstructuredData> supplemental_info = 2;
  optional DeviceAssignmentByCoords device_assignment_by_coords = 3;

  // A list of paths frequently used in this manifest. Once a path is added to
  // this list, use sites can refer to it by its index here instead of spelling
  // out the full string.
  repeated string frequent_paths = 4;
}

// Copied from /third_party/australis/google/ifrt/ifrt_australis.proto.
// Represents a mapping between device ids and coords. This allows consistently
// mapping between incompatible id spaces by aligning the coords.
message DeviceAssignmentByCoords {
  message Device {
    int64 id = 1;
    repeated int64 coords = 2;
    optional int64 core_on_chip = 3;
  }

  repeated Device devices = 1;
}

message TopLevelObject {
  oneof case {
    Function function = 1;
    Value value = 2;
    PolymorphicFunction poly_fn = 3;
  }
}

message Function {
  orbax_model_type.FunctionSignature signature = 1;
  FunctionBody body = 2;
  // The names of the dependent data. Each of this corresponds to a key in the
  // checkpoint metadata.
  repeated string data_names = 3;

  Visibility visibility = 4;
  optional string gradient_function_name = 5;
}

message Value {
  oneof case {
    ExternalValue external = 1;
    TupleValue tuple = 2;
    NamedTupleValue named_tuple = 3;

    // ...  list, dict, none
  }
}

// An (ad-hoc) polymorphic function consists of a set of `Function`s which are
// known as "concrete functions" in this context. When a polymorphic function is
// called, it will pick a concrete function whose signature (most precisely)
// matches the arguments.
message PolymorphicFunction {
  repeated Function concrete_functions = 1;
}

// Indicates which data loader to use to load the data from external storage.
enum LoaderType {
  // The default loader, which loads the data from an Orbax checkpoint.
  LOADER_TYPE_DEFAULT = 0;
}

message ExternalValue {
  optional orbax_model_type.Type type = 1;
  UnstructuredData data = 2;

  // The type of data loader.
  LoaderType loader_type = 3;
}

message TupleValue {
  repeated string elements = 1;  // string is a name in Manifest.objects
}

message NamedTupleValue {
  message Pair {
    string name = 1;
    string value = 2;
  }

  repeated Pair elements = 1;
}

enum Visibility {
  PRIVATE = 0;
  PUBLIC = 1;
}

message FunctionBody {
  oneof case {
    StableHloFunctionBody stable_hlo_body = 1;
    UnstructuredData other = 2;  // e.g. TF graph
  }
}

message StableHloFunctionBody {
  UnstructuredData stable_hlo = 1;

  // some metadata
  uint32 calling_convention_version = 2;
  repeated string lowering_platforms = 3;
  repeated uint32 module_kept_var_idx = 4;
  map<string, UnstructuredData> supplemental_info =
      5;  // e.g. JAX-specific info
}

message UnstructuredData {
  oneof data {
    FileSystemLocation file_system_location = 1;
    string inlined_string = 2;
    bytes inlined_bytes = 3;
  }

  optional string mime_type = 4;  // e.g. “mlir_stablehlo”
  optional string version = 5;
}

message FileSystemLocation {
  oneof path {
    // an absolute or relative path (as string)
    string string_path = 1;

    // an index into `Manifest.frequent_paths`
    int32 frequent_path_idx = 2;
  }

  // Absence means 0 (i.e. start of the file).  Negative means counting from the
  // end, i.e. real_offset_in_byte = offset_in_byte + file_length_in_byte .
  optional int64 offset_in_byte = 3;

  // Absence means spanning to the end of the file.
  optional uint64 size_in_byte = 4;
}

enum Platform {
  PLATFORM_UNSPECIFIED = 0;
  CPU = 1;
  CUDA = 2;
  ROCM = 3;
  TPU = 4;
}
